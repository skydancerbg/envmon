
// In the traditional standard, [entity] numbers for those entities start with a digit, followed by a number of four digits in range 1–9,999:
// coils numbers start with a zero and then span from 00001 to 09999
// discrete input numbers start with a one and then span from 10001 to 19999
// input register numbers start with a three and then span from 30001 to 39999
// holding register numbers start with a four and then span from 40001 to 49999
// This translates into [entity] addresses between 0 and 9,998 in data frames.

// !!! Note that entity begins counting at 1, data frame address at 0.

/////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/////////////////////////
    //!         !!! USEFULL LINKS  !!!
    //
    // MODBUS BINDING https://www.openhab.org/addons/bindings/modbus/
    // USE Rapid SCADA Modbus Parser TO VISUALIZE MODBUS REQUEST/RESPONSE http://modbus.rapidscada.net/
    // USE TERMITE TO TEST COMMUNICATION WITH THE DEVICE UNDER WIN10 http://s2-team.ru/wrkrs/prods/modbus-tools/termite/
    // FOR ORNO ENERGY METERS USE THE WIN10 SOFTWARE PROVIDED ON THE MANUFACTURER SITE TO TEST COMMUNICATION AND SETUP THE METER 
    // https://www.orno.pl/en/category/productData/4821/1-phase-multi-tariff-energy-meter-wtih-RS-485--100A
//

/////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/////////////////////////
    //!         !!! IMPORTANT   !!!
    //
    //! WHEN editing Things, PERFORM a binding restart or a system reboot after editing. 
    //! Changes in Things do not make it into pollers that are already running. !!!!!!

    //! Start address to start reading the value. Use empty for write-only things.
    //! Input as zero-based index number, e.g.:

    //!!!!! in place of 400001 (first holding register), use the address "0". !!!
    
    //! Must be between (poller start) and (poller start + poller length - 1) (inclusive).
/////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/////////////////////////


/////////----------------------------------------------------------/////////////////////////
    //!   Light Intensity Sensor Temperature And Humidity - Slave address 0xA (10)
 /////////----------------------------------------------------------/////////////////////////

Bridge modbus:tcp:sensorTHL_id_10 [ host="10.10.10.101", port=502, id=10, timeBetweenTransactionsMillis=500, rtuEncoded=false ]
{

    // Bridge poller sensorData [ start=0, length=3, refresh=30000, type="input" ] {
    Bridge poller sensorData [ start=0, length=3, refresh=15000, type="input" ] {
        Thing data tempCelsius [ readStart="0", readValueType="uint16", readTransform = "JS(divide10.js)" ]
        Thing data humidity [ readStart="1", readValueType="uint16", readTransform = "JS(divide10.js)" ]
        Thing data lux [ readStart="2", readValueType="uint16" ]
    }
    // Reading registers one by one (as below) is inefficient!!!!!
    // Bridge poller temperature [ start=0, length=1, refresh=30000, type="input" ] {
    //     Thing data tempCelsius [ readStart="0", readValueType="uint16", readTransform = "JS(divide10.js)" ]
    // }

    // Bridge poller humidity [ start=1, length=1, refresh=30000, type="input" ] {
    //     Thing data humidity [ readStart="1", readValueType="uint16", readTransform = "JS(divide10.js)" ]
    // }

    // Bridge poller luminosity [ start=2, length=1, refresh=30000, type="input" ] {
    //     Thing data lux [ readStart="2", readValueType="uint16" ]
    // }


}

/////////----------------------------------------------------------/////////////////////////
    //!  KM21B30-NH3 Amonia sensor - Slave address 0xB (11)
 /////////----------------------------------------------------------/////////////////////////

Bridge modbus:tcp:sensorNH3_id_11 [ host="10.10.10.101", port=502, id=11, timeBetweenTransactionsMillis=500, rtuEncoded=false ]
{
//Start address to start reading the value. Use empty for write-only things.
// Input as zero-based index number, e.g. in place of 400001 (first holding register), use the address "0".
// Must be between (poller start) and (poller start + poller length - 1) (inclusive).

    // Bridge poller amonia [ start=0, length=1, refresh=30000, type="holding" ] {
    Bridge poller amonia [ start=0, length=1, refresh=15000, type="holding" ] {
        Thing data nh3 [ readStart="0", readValueType="uint16", readTransform = "JS(divide100.js)" ]
    }

}

/////////----------------------------------------------------------/////////////////////////
    //!  Particulate Matter PM2.5/PM10 Sensor - Slave address 0xC (12)
    //     holding 40001 - PM2.5
    //     holding 40002 - PM10

 /////////----------------------------------------------------------/////////////////////////

Bridge modbus:tcp:sensorParticulateMatter [ host="10.10.10.101", port=502, id=12, timeBetweenTransactionsMillis=500, rtuEncoded=false ]
{
//Start address to start reading the value. Use empty for write-only things.
// Input as zero-based index number, e.g. in place of 400001 (first holding register), use the address "0".
// Must be between (poller start) and (poller start + poller length - 1) (inclusive).

    // Bridge poller particulatematter [ start=0, length=2, refresh=30000, type="holding" ] {
    Bridge poller particulatematter [ start=0, length=2, refresh=15000, type="holding" ] {
        Thing data pm2dot5 [ readStart="0", readValueType="uint16" ]
        Thing data pm10    [ readStart="1", readValueType="uint16" ]
    }

}

/////////----------------------------------------------------------/////////////////////////
    //!  Particulate Matter PM2.5/PM10 Sensor - Slave address 0xC (12)
    //     holding 40001 - Humidity
    //     holding 40002 - Temperature
    //     holding 40003 - Methane LEL

 /////////----------------------------------------------------------/////////////////////////

Bridge modbus:tcp:sensorMethaneTH [ host="10.10.10.101", port=502, id=13, timeBetweenTransactionsMillis=500, rtuEncoded=false ]
{
//Start address to start reading the value. Use empty for write-only things.
// Input as zero-based index number, e.g. in place of 400001 (first holding register), use the address "0".
// Must be between (poller start) and (poller start + poller length - 1) (inclusive).

    // Bridge poller sensorvalues [ start=0, length=3, refresh=30000, type="holding" ] {
    //     Thing data humidity     [ readStart="0", readValueType="uint16" ]
    //     Thing data temperature  [ readStart="1", readValueType="uint16" ]
    //     Thing data methane  [ readStart="2", readValueType="uint16" ]
    // }

    // Bridge poller sensorData [ start=0, length=3, refresh=30000, type="holding" ] {
    Bridge poller sensorData [ start=0, length=3, refresh=15000, type="holding" ] {
        Thing data humidityPercent [ readStart="0", readValueType="uint16", readTransform = "JS(divide10.js)" ]
        Thing data temperatureC [ readStart="1", readValueType="uint16", readTransform = "JS(divide10.js)" ]
        Thing data ch4_LEL [ readStart="2", readValueType="uint16" ]
    }

    // Bridge poller temperature [ start=1, length=1, refresh=30000, type="holding" ] {
    //     Thing data temperatureC [ readStart="1", readValueType="uint16", readTransform = "JS(divide10.js)" ]
    // }

    // Bridge poller methane [ start=2, length=1, refresh=30000, type="holding" ] {
    //     Thing data ch4LEL [ readStart="2", readValueType="uint16" ]
    // }

}



/////////----------------------------------------------------------/////////////////////////
    //!             ORNO 515 SIGLE PHASE METER 
    //!
    //! ORNO 515 SIGLE PHASE METER SET AT Slave address 0x20 (32 Decimal)
    //! 
 /////////----------------------------------------------------------/////////////////////////

//
// ORNO 515 ENERGY METER -SINGLE PHASE ----  
// 11bits data (1 start bit, 8 data bit, 1 even check bit, 1 stop bit)
// Communication commands will choose CRC check (2bytes)
// Meter ID will use 01 as default, baud rate 9600bps, but 1200bps、 2400bps、 4800bps(optional)
//

Bridge modbus:tcp:energy_meter [ host="10.10.10.101", port=502, id=32, timeBetweenTransactionsMillis=500, rtuEncoded=false ]
{
// Grid Frequency:
       Bridge poller Hz [start = 304, length = 1, refresh = 10000, type = "holding"]
        {
            Thing data Hz [readStart = "304", readValueType = "uint16", readTransform = "JS(divide100.js)"]
        }

// Voltage:
        //! Holding rgister 306 - bacuse it is zero based in the binding we read 305 =(306-1)                        
        Bridge poller volt [start = 305, length = 1, refresh = 10000, type = "holding"]
        // Bridge poller volt [start = 306, length = 1, refresh = 10000, type = "holding"]
        {
            Thing data V [readStart = "305", readValueType = "uint16", readTransform = "JS(divide100.js)"]
            // Thing data V [readStart = "306", readValueType = "uint16", readTransform = "JS (divide100.js)"]
        }

// Current:
        Bridge poller ampers [start = 313, length = 2, refresh = 10000, type = "holding"]
        {
            Thing data A [readStart = "313", readValueType = "uint32", readTransform = "JS(divide1000.js)"]    
        }

// Active Power:
        Bridge poller power [start = 320, length = 2, refresh = 10000, type = "holding"]
        {
            Thing data P [readStart = "320", readValueType = "uint32"]  
        }

// Reactive Power:
        Bridge poller reactive_power [start = 328, length = 2, refresh = 10000, type = "holding"]
        {
            Thing data rP [readStart = "328", readValueType = "uint32"]  
        }

// Apparent Power:
        Bridge poller apparent_power [start = 336, length = 2, refresh = 10000, type = "holding"]
        {
            Thing data aP [readStart = "336", readValueType = "uint32"]  
        }

// Power Factor:
        Bridge poller power_factor [start = 344, length = 1, refresh = 10000, type = "holding"]
        {
            Thing data Pf [readStart = "344", readValueType = "uint16", readTransform = "JS(divide1000.js)"]  
        }



// Active Energy:
        Bridge poller totalkwh [start = 40960, length = 10, refresh = 10000, type = "holding"]
        {
            Thing data totalkwh [readStart = "40960", readValueType = "uint32", readTransform = "JS(divide100.js)"]
            Thing data totalkwhT1 [readStart = "40962", readValueType = "uint32", readTransform = "JS(divide100.js)"]
            Thing data totalkwhT2 [readStart = "40964", readValueType = "uint32", readTransform = "JS(divide100.js)"]
            Thing data totalkwhT3 [readStart = "40966", readValueType = "uint32", readTransform = "JS(divide100.js)"]
            Thing data totalkwhT4 [readStart = "40968", readValueType = "uint32", readTransform = "JS(divide100.js)"]
        }

// Reactive Energy:
        Bridge poller totalkvarh [start = 40990, length = 10, refresh = 10000, type = "holding"]
        {
            Thing data totalkvarh   [readStart = "40990", readValueType = "uint32", readTransform = "JS(divide100.js)"]
            Thing data totalkvarhT1 [readStart = "40992", readValueType = "uint32", readTransform = "JS(divide100.js)"]
            Thing data totalkvarhT2 [readStart = "40994", readValueType = "uint32", readTransform = "JS(divide100.js)"]
            Thing data totalkvarhT3 [readStart = "40996", readValueType = "uint32", readTransform = "JS(divide100.js)"]
            Thing data totalkvarhT4 [readStart = "40998", readValueType = "uint32", readTransform = "JS(divide100.js)"]
        }

}